{"version":3,"file":"0.370064e81f3222ffb079.hot-update.js","sources":["webpack:///src/index.js?1fdf"],"sourcesContent":["'use strict'\r\n// 1.let const\r\n//重复定义会报错\r\nif(true){\r\n  let a = 1;\r\n  //let a = 2; //Identifier 'a' has already been declared\r\n}\r\n\r\n//不存在变量的提升\r\nconsole.log(i)\r\nlet i=10;\r\n//结果 i is not define\r\n//嵌套循环不相互影响\r\nfor (let i = 0; i < 3; i++) {\r\n  console.log('out',i);\r\n  for(let i = 0;i<2;i++){\r\n    console.log('in',i);\r\n  }\r\n}//结果 out 0 in 0 in 1 out 1 in 0 in 1 out 2 in 0 in 1\r\n//里边的能拿到外边的值，外边的拿不到里边的值\r\n// 2.解构\r\n//解构意思就是分解一个东西的结构,可以用一种类似数组的方式定义N个变量，可以将一个数组中的值按照规则赋值过去。\r\nvar [name,age] = ['zfpx',8];\r\nconsole.log(name,age); // zfpx 8\r\n\r\nvar [x,y]=getVal(),//函数返回值的解构\r\n    [name,,age]=['zf','male','secrect'];//数组解构\r\n\r\nfunction getVal() {\r\n    return [ 1, 2 ];\r\n}\r\n\r\nconsole.log('x:'+x+', y:'+y);//输出：x:1, y:2\r\nconsole.log('name:'+name+', age:'+age);//输出： name:zf, age:secrect\r\n//数组、对象和字符串的解构赋值示例：\r\n// 数组的解构赋值\r\nlet [foo, [[bar], baz]] = [1, [[2], 3]];\r\nconsole.log(foo); // 1\r\nconsole.log(bar); // 2\r\nconsole.log(baz); // 3\r\n\r\n// 对象的解构赋值\r\nlet { foa, bab } = { foa: \"aaa\", bab: \"bbb\" };\r\nconsole.log(foa);   // \"aaa\"\r\nconsole.log(bab);  // \"bbb\"\r\n\r\n// 字符串的解构赋值\r\nconst [a, b, c, d, e] = 'hello';\r\nconsole.log(a + b + c + e); // 'hello'\r\n\r\n// 3.Arrows 箭头函数 #\r\n//①箭头函数简化了函数的的定义方式，一般以 \"=>\" 操作符左边为输入的参数，而右边则是进行的操作以及返回的值Inputs=>outputs。\r\n//②箭头函数根本没有自己的this，导致内部的this就是外层代码块的this。正是因为它没有this，所以也就不能用作构造函数，从而避免了this指向的问题。\r\nlet array = [1,2,3];\r\n//传统写法\r\narray.forEach(function(v,i,n){\r\n  console.log(v);\r\n});\r\n//ES6写法\r\narray.forEach(v => console.log(v));\r\n\r\n//4.Template Strings 字符串模板\r\n//ES6中允许使用反引号 ` 来创建字符串，此种方法创建的字符串里面可以包含由美元符号加花括号包裹的变量${vraible}。\r\nlet arr1 = 'leifeng';\r\nlet age1 = '18';\r\nconsole.log(`${arr1} was ${age1}`);\r\n\r\n//5.Default + Rest + Spread\r\n//Default 默认参数值,定义函数的时指定参数的默认值\r\nfunction say(name5 = 'zhaoan') {\r\n  console.log(`hello ${name5}`);\r\n}\r\nsay();\r\nsay('xiaolli');\r\n// rest剩余参数  不定参数是在函数中使用命名参数同时接收不定数量的未命名参数。这只是一种语法糖，\r\n//不定参数的格式是三个句点后跟代表所有不定参数的变量名。比如下面这个例子中，…x代表了所有传入add函数的参数。\r\nfunction restFun(a,...rest) {\r\n  console.log(a);\r\n  console.log(rest);\r\n}\r\nrestFun(1);\r\nrestFun(1,2,5);\r\n\r\n//将所有参数相加的函数\r\nfunction add(...x){\r\n    return x.reduce((m,n)=>m+n);\r\n}\r\n//传递任意个数的参数\r\nconsole.log(add(1,2,3));//输出：6\r\nconsole.log(add(1,2,3,4,5));//输出：15\r\n\r\n//Spread 扩展操作符 扩展操作符则是另一种形式的语法糖，它允许传递数组或者类数组直接做为函数的参数而不用通过apply。\r\nvar arry = ['jd','hk','we'];\r\nfunction sayHellow(...rest){\r\n  console.log(`hellow ${rest[0]},${rest[1]},${rest[2]}`);\r\n}\r\n//将一个数组以拓展参数的形式传递，它能很好地映射到每个单独的参数\r\nsayHellow(...arry);\r\n//需要传递数组当参数，我们需要使用函数的apply方法\r\nsayHellow.apply(null,arry);\r\n//6.Class, extends, super 类的支持\r\n//ES6中添加了对类的支持，引入了class关键字\r\n//3. 类中方法constructor 中只写属性\r\nclass className1 {\r\n  constructor(){\r\n    this.aa= '属性name1'\r\n  }//只写属性(可写其他的东西但最好不写)\r\n  name1(){//方法和其他另写\r\n    let x = 10;\r\n    console.log('111');\r\n  }\r\n}\r\n// let text1 = new className1();\r\n// console.log(text1.ll);\r\n\r\n// extends  类继承 所有的属性方法\r\nclass className2 extends className1 {\r\n  constructor(){\r\n    super(); //可理解为继承的意思\r\n    this.bb = 'name2的属性'\r\n  }//如果为空 需注释掉或删掉否则报错，如果要写新的属性则头部必加super()\r\n  name2(){\r\n    console.log('我是name2');\r\n  }\r\n}\r\n\r\nlet text2 = new className2();\r\n\r\nconsole.log(text2.name2());\r\nconsole.log(text2.name1());\r\nconsole.log(text2.bb);\r\nconsole.log(text2.aa);\r\n\n\n\n// WEBPACK FOOTER //\n// src/index.js"],"mappings":";;;;;AAAA;AACA;AACA;AACA;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;;;AADA;AAAA;AACA;AACA;AACA;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;;;AACA;AAAA;AACA;AAAA;AADA;AACA;AACA;AAFA;AAGA;AACA;AACA;;;AADA;AACA;AACA;;;;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;;;A","sourceRoot":""}